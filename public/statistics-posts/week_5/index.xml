<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Week 5 HW on Matteo Bianchi personal site and blog</title>
    <link>https://www.matteobianchi.eu/statistics-posts/week_5/</link>
    <description>Recent content in Week 5 HW on Matteo Bianchi personal site and blog</description>
    <image>
      <title>Week 5 HW on Matteo Bianchi personal site and blog</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_5/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.3 (Hugo 0.88.1)</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 28 Oct 2021 15:28:33 UT</lastBuildDate>
    <atom:link href="https://www.matteobianchi.eu/statistics-posts/week_5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5_RA</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_5/5ra/</link>
      <pubDate>Sat, 23 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_5/5ra/</guid>
      <description>5_RA assignament Request Do a web research about the various methods to generate, from a Uniform([0,1)), all the most important random variables (discrete and continuous). Collect all source code you think might be useful code of such algorithms (keep credits and attributions wherever applicable), as they will be useful for our next simulations.
https://en.wikipedia.org/wiki/List_of_probability_distributions https://www.cs.wm.edu/~va/software/park/park.html https://www.johndcook.com/blog/2010/05/03/c-random-number-generation-code/ https://homeweb.csulb.edu/~tebert/teaching/lectures/552/variate/variate.pdf https://www.jstor.org/stable/1402590 https://www.icosaedro.it/phplint/generating-statistical-distributions/index.html</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[5_RA assignament Request Do a web research about the various methods to generate, from a Uniform([0,1)), all the most important random variables (discrete and continuous). Collect all source code you think might be useful code of such algorithms (keep credits and attributions wherever applicable), as they will be useful for our next simulations.
https://en.wikipedia.org/wiki/List_of_probability_distributions https://www.cs.wm.edu/~va/software/park/park.html https://www.johndcook.com/blog/2010/05/03/c-random-number-generation-code/ https://homeweb.csulb.edu/~tebert/teaching/lectures/552/variate/variate.pdf https://www.jstor.org/stable/1402590 https://www.icosaedro.it/phplint/generating-statistical-distributions/index.html
]]></content:encoded>
    </item>
    <item>
      <title>6_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_5/6r/</link>
      <pubDate>Sat, 23 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_5/6r/</guid>
      <description>6_R assignament Request Think and explain in your own words what is the role that probability plays in Statistics and the relation between the observed distribution and frequencies their &amp;ldquo;theoretical&amp;rdquo; counterparts. Do some practical examples where you explain how the concepts of an abstract probability space relate to more &amp;ldquo;concrete&amp;rdquo; and &amp;ldquo;real-world&amp;rdquo; objects when doing statistics.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[6_R assignament Request Think and explain in your own words what is the role that probability plays in Statistics and the relation between the observed distribution and frequencies their &amp;ldquo;theoretical&amp;rdquo; counterparts. Do some practical examples where you explain how the concepts of an abstract probability space relate to more &amp;ldquo;concrete&amp;rdquo; and &amp;ldquo;real-world&amp;rdquo; objects when doing statistics.
]]></content:encoded>
    </item>
    <item>
      <title>7_A</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_5/7a/</link>
      <pubDate>Sat, 23 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_5/7a/</guid>
      <description>7_A assignament Request Given 2 variables from a csv compute and represent the statistical regression lines (X to Y and viceversa) and the scatterplot. Optionally, represent also the histograms on the &amp;ldquo;sides&amp;rdquo; of the chart (one could be draw vertically and the other one horizontally, in the position that you prefer). [Remember that all our charts must alway be done within &amp;ldquo;dynamic viewports&amp;rdquo; (movable/resizable rectangles). No third party libraries, to ensure ownership of creative process.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[7_A assignament Request Given 2 variables from a csv compute and represent the statistical regression lines (X to Y and viceversa) and the scatterplot. Optionally, represent also the histograms on the &amp;ldquo;sides&amp;rdquo; of the chart (one could be draw vertically and the other one horizontally, in the position that you prefer). [Remember that all our charts must alway be done within &amp;ldquo;dynamic viewports&amp;rdquo; (movable/resizable rectangles). No third party libraries, to ensure ownership of creative process. May choose the language you prefer.].
My Solution   Code in C#
Class Main Form in C# public partial class Bivarianteform : Form { public Bivarianteform() { InitializeComponent(); contb = new Bitmap(755, 681); g2 = Graphics.FromImage(contb); } Dictionary&amp;lt;int, ElementoDisribuzione&amp;gt; csvContent = new Dictionary&amp;lt;int, ElementoDisribuzione&amp;gt;(); Distribuzione distr = new Distribuzione(); MediaCalOnline medie = new MediaCalOnline(); String[,] bivariantMatrix; List&amp;lt;String&amp;gt; attributename = new List&amp;lt;string&amp;gt;(); List&amp;lt;String&amp;gt; bivariante = new List&amp;lt;string&amp;gt;();//per ora poi diventera n variante;  Bitmap contb; Graphics g2; List&amp;lt;PointF&amp;gt; points = new List&amp;lt;PointF&amp;gt;(); List&amp;lt;PointF&amp;gt; regressiony = new List&amp;lt;PointF&amp;gt;(); List&amp;lt;PointF&amp;gt; regressionx = new List&amp;lt;PointF&amp;gt;(); Matrix m = new Matrix(); Matrix m2 = new Matrix(); Matrix m3 = new Matrix(); int nr, nc; //Distributions  SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt; firstdistr; SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt; seconddistr; bool movable = false; bool resiable = false; // movable view port  int contgleft = 0; int contgtop = 50; int contgwid = 400; int contgheight = 400; int mouseDeltax=0; int mouseDeltay=0; // window  double minX_Window = 0; double maxX_Window = 400; double minY_Window = 0; double maxY_Window = 400; Rectangle viewPortcontig=new Rectangle(0,50, 400, 400); private void button1_Click(object sender, EventArgs e) { var filePath = string.Empty; openFileDialog1.InitialDirectory = &amp;#34;c:\\&amp;#34;; openFileDialog1.Filter = &amp;#34;csv files (*.csv)|*.csv|All files (*.*)|*.*&amp;#34;; openFileDialog1.FilterIndex = 2; openFileDialog1.RestoreDirectory = true; if (openFileDialog1.ShowDialog() == DialogResult.OK) { //Get the path of specified file  filePath = openFileDialog1.FileName; //Read the contents of the file into a stream  using (TextFieldParser csvParser = new TextFieldParser(filePath)) { csvParser.CommentTokens = new string[] { &amp;#34;#&amp;#34; }; csvParser.SetDelimiters(new string[] { &amp;#34;,&amp;#34; }); csvParser.HasFieldsEnclosedInQuotes = true; // Save the row with the column names  string[] fieldsNames = csvParser.ReadFields(); attributename.AddRange(fieldsNames); int i = 0; while (!csvParser.EndOfData) { // Read current line fields, pointer moves to the next line.  string[] fields = csvParser.ReadFields(); ElementoDisribuzione elem = new ElementoDisribuzione(fields[0]); int j = 0; foreach (String field in fields) { if (!String.IsNullOrEmpty(field)) { double tmp; if (Double.TryParse(field, out tmp)) { elem.setVariable(fieldsNames[j], new Tuple&amp;lt;Object, Type&amp;gt;(tmp, tmp.GetType())); medie.addAttribute(fieldsNames[j], tmp); } else elem.setVariable(fieldsNames[j], new Tuple&amp;lt;Object, Type&amp;gt;(field, field.GetType())); } j&#43;&#43;; } csvContent.Add(i, elem); distr.addElementoDef(elem); i&#43;&#43;; } } button2.Visible = true; } } private void button2_Click(object sender, EventArgs e) { ; foreach (var elem in attributename) contextMenuStrip1.Items.Add(elem); contextMenuStrip1.Visible = true; } private void contextMenuStrip1_Opening(object sender, CancelEventArgs e) { } private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e) { bivariante.Add(e.ClickedItem.Text); button2.Visible = false; foreach (var elem in attributename) contextMenuStrip2.Items.Add(elem); contextMenuStrip2.Visible = true; } private void contextMenuStrip2_ItemClicked(object sender, ToolStripItemClickedEventArgs e) { bivariante.Add(e.ClickedItem.Text); double mediax = 0; double mediay = 0; double sigmax2=0; double sigmay2=0; double sigmaxy=0; bool isDouble = false; List&amp;lt;Double&amp;gt; valuesx = new List&amp;lt;double&amp;gt;(0); List&amp;lt;Double&amp;gt; valuesy = new List&amp;lt;double&amp;gt;(0); medie.getMedia(bivariante.ElementAt(0), out mediax); //se la media è diversa da zero sono sicuro che è double  medie.getMedia(bivariante.ElementAt(1), out mediay); if (mediax != 0) { if (mediay != 0) { isDouble = true; Tuple&amp;lt;Object, Type&amp;gt; tmp; foreach (var elm in csvContent.Values) { elm.getVariable(bivariante.ElementAt(0), out tmp); valuesx.Add((double)tmp.Item1); elm.getVariable(bivariante.ElementAt(1), out tmp); valuesy.Add((double)tmp.Item1); } medie.getdDeviation2(bivariante.ElementAt(0), valuesx, out sigmax2); distr.getdistribuzioneN(bivariante.ElementAt(0), out firstdistr); medie.getdDeviation2(bivariante.ElementAt(1), valuesy, out sigmay2); distr.getdistribuzioneN(bivariante.ElementAt(1), out seconddistr); medie.getbivariantDeviation(bivariante.ElementAt(0), bivariante.ElementAt(1), valuesx,valuesy, out sigmaxy); for (int i = 0; i &amp;lt;= maxX_Window; i&#43;&#43;) { regressionx.Add(new PointF(i, (float) (((sigmaxy / sigmax2) * (i - mediax)) &#43; mediay))); } for (int i = 0; i &amp;lt;= maxY_Window; i&#43;&#43;) { regressiony.Add(new PointF((float)(((sigmaxy / sigmay2) * (i - mediay)) &#43; mediax), i)); } } } bivariantMatrix = distr.getbivariantmatrix(bivariante, csvContent.Values, out nr, out nc); this.button3.Visible = true; } private void button3_Click(object sender, EventArgs e) { creaGrafici(); } private void creaGrafici() { foreach (var elem in csvContent) { Tuple&amp;lt;Object, Type&amp;gt; a, b; float x, y; elem.Value.getVariable(bivariante.ElementAt(0), out a); elem.Value.getVariable(bivariante.ElementAt(1), out b); x = (float)(double)a.Item1; y = (float)(double)b.Item1; points.Add(new PointF(x, y)); } //contingency  createconting(g2, 0, 50,400,400); } private void createconting(Graphics g2, int dinamicleft, int dinamictop,int contgw,int contgh) { viewPortcontig.X = dinamicleft; viewPortcontig.Y = dinamictop; viewPortcontig.Width = contgw; viewPortcontig.Height = contgh; //viewPortcontig.Location= new Point(viewPortcontig.Location.X&#43;dinamicleft,viewPortcontig.Location.Y&#43;dinamictop);  g2.Clear(BackColor); g2.FillRectangle(Brushes.White, viewPortcontig); // window drow  g2.DrawLine(new Pen(Color.Black, 2), viewPortcontig.X, viewPortcontig.Y, viewPortcontig.X, (viewPortcontig.Y &#43; viewPortcontig.Height)); g2.DrawLine(new Pen(Color.Black, 2), viewPortcontig.X, (viewPortcontig.Y &#43; viewPortcontig.Height), (viewPortcontig.X &#43; viewPortcontig.Width), (viewPortcontig.Y &#43; viewPortcontig.Height)); m.Reset(); m.Translate(-(int)minX_Window, -(int)minY_Window, MatrixOrder.Append); m.Scale((int)(viewPortcontig.Width / (maxX_Window - minX_Window)), (int)(-viewPortcontig.Height / (maxY_Window - minY_Window)), MatrixOrder.Append); m.Translate(viewPortcontig.Left, viewPortcontig.Top &#43; viewPortcontig.Height, MatrixOrder.Append); PointF[] myPoints = points.ToArray(); PointF[] myPointsreal = points.ToArray(); PointF[] pRegressionx = regressionx.ToArray(); PointF[] pRegressiony = regressiony.ToArray(); int i = 0; m.TransformPoints(myPoints); m.TransformPoints(pRegressionx); m.TransformPoints(pRegressiony); foreach (PointF punto in myPoints) { if (myPointsreal[i].X &amp;lt;= maxX_Window &amp;amp;&amp;amp; myPointsreal[i].Y &amp;lt;= maxY_Window) { g2.FillEllipse(Brushes.Black, new Rectangle(new Point((int)(punto.X - 2), (int)(punto.Y - 2)), new Size(4, 4))); g2.DrawString(myPointsreal[i].ToString(), new Font(&amp;#34;Arial&amp;#34;, 10), Brushes.Black, (int)(punto.X), (int)(punto.Y)); g2.FillEllipse(Brushes.Red, new Rectangle(new Point((int)(punto.X - 2), (int)(viewPortcontig.Y &#43; viewPortcontig.Height - 2)), new Size(4, 4))); g2.FillEllipse(Brushes.Red, new Rectangle(new Point((int)(viewPortcontig.X), (int)(punto.Y - 2)), new Size(4, 4))); } i&#43;&#43;; ; } foreach (PointF punto in pRegressionx) { g2.FillEllipse(Brushes.Red, new Rectangle(new Point((int)(punto.X - 2), (int)(punto.Y - 2)), new Size(4, 4))); } foreach (PointF punto in pRegressiony) { g2.FillEllipse(Brushes.Green, new Rectangle(new Point((int)(punto.X - 2), (int)(punto.Y - 2)), new Size(4, 4))); } pictureBox2.Image = contb ; } private void pictureBox2_MouseDown(object sender, MouseEventArgs e) { if ( (e.Location.Y&amp;gt;=viewPortcontig.Top &amp;amp;&amp;amp;e.Location.Y &amp;lt;= (viewPortcontig.Top&#43;viewPortcontig.Height))&amp;amp;&amp;amp;(e.Location.X &amp;gt;= viewPortcontig.Left &amp;amp;&amp;amp; e.Location.X &amp;lt;= (viewPortcontig.Left &#43; viewPortcontig.Width))) { if (e.Button == MouseButtons.Left) movable = true; if (e.Button == MouseButtons.Right) resiable = true; mouseDeltax = e.Location.X; mouseDeltay = e.Location.Y; } } private void pictureBox2_MouseLeave(object sender, EventArgs e) { resiable = false; movable = false; } private void pictureBox2_MouseMove(object sender, MouseEventArgs e) { if (movable == true) { contgleft = e.Location.X; contgtop = e.Location.Y; if (contgleft &amp;lt;= 0) contgleft = 0; if (contgtop &amp;lt;= 20) contgtop = 20; createconting(g2, contgleft, contgtop, contgwid, contgheight); } if (resiable == true) { mouseDeltax = -mouseDeltax &#43; e.Location.X ; mouseDeltay = -mouseDeltay &#43; e.Location.Y; contgwid &#43;= mouseDeltax/40; contgheight &#43;= mouseDeltay/40; createconting(g2, contgleft, contgtop, contgwid, contgheight); } } private void pictureBox2_MouseUp(object sender, MouseEventArgs e) { resiable = false; movable = false; } } } ]]></content:encoded>
    </item>
    <item>
      <title>7_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_5/7r/</link>
      <pubDate>Sat, 23 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_5/7r/</guid>
      <description>7_R assignament Request Explain the Bayes Theorem and its key role in statistical induction. Describe the different paradigs that can be found within statistical inference (such as&amp;quot;bayesian&amp;quot;, &amp;ldquo;frequentist&amp;rdquo; [Fisher, Neyman]).
The Bayes Theorem Statistical infernce paradigm Analyse the difference between a “Bayesian” and a “frequentist” approach.
Basically, a frequentist method makes predictions on the underlying truths of the experiment using only data from the current experiment.
So, the biggest distinction is that Bayesian probability specifies that there is some prior probability.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[7_R assignament Request Explain the Bayes Theorem and its key role in statistical induction. Describe the different paradigs that can be found within statistical inference (such as&amp;quot;bayesian&amp;quot;, &amp;ldquo;frequentist&amp;rdquo; [Fisher, Neyman]).
The Bayes Theorem Statistical infernce paradigm Analyse the difference between a “Bayesian” and a “frequentist” approach.
Basically, a frequentist method makes predictions on the underlying truths of the experiment using only data from the current experiment.
So, the biggest distinction is that Bayesian probability specifies that there is some prior probability.
We saw this difference during the lecture by examining the formula:
The division between the two schools of thought occurs because of the term P(θ).
We don’t have the value of the term at prior, the frequentist have chosen to ignore the term and assign it a uniform distribution, while Bayesians have chosen to use a certain already calculated shape.
]]></content:encoded>
    </item>
  </channel>
</rss>
