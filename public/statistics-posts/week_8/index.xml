<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Week 8 HW on Matteo Bianchi personal site and blog</title>
    <link>https://www.matteobianchi.eu/statistics-posts/week_8/</link>
    <description>Recent content in Week 8 HW on Matteo Bianchi personal site and blog</description>
    <image>
      <title>Week 8 HW on Matteo Bianchi personal site and blog</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.3 (Hugo 0.80.0)</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 27 Nov 2021 23:59:00 UT</lastBuildDate>
    <atom:link href="https://www.matteobianchi.eu/statistics-posts/week_8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/10r/</link>
      <pubDate>Fri, 05 Nov 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_8/10r/</guid>
      <description>10_R assignament Request Distributions of the order statistics: look on the web for the most simple (but still rigorous) and clear derivations of the distributions, explaining in your own words the methods used.
Order statistics Together with rank statistics, order statistics are among the most fundamental tools in non-parametric statistics and inference. In statistics we define the kth order statistic of a statistical sample as its kth-smallest value.[1]
Important special cases of the order statistics are the minimum and maximum value of a sample, and the sample median and other sample quantiles.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[10_R assignament Request Distributions of the order statistics: look on the web for the most simple (but still rigorous) and clear derivations of the distributions, explaining in your own words the methods used.
Order statistics Together with rank statistics, order statistics are among the most fundamental tools in non-parametric statistics and inference. In statistics we define the kth order statistic of a statistical sample as its kth-smallest value.[1]
Important special cases of the order statistics are the minimum and maximum value of a sample, and the sample median and other sample quantiles.
When using probability theory to analyze order statistics of random samples from a continuous distribution, the cumulative distribution function is used to reduce the analysis to the case of order statistics of the uniform distribution.
Probability density functions of the order statistics for a sample of size n = 5 from an exponential distribution with unit scale parameter
Distributions function of order statistic For a random sample as above, with cumulative distribution Fx(x), the order statistics for that sample have cumulative distributions as follows (where r specifies which order statistic):
the corresponding probability density function may be derived from this result, and is found to be:
Moreover, there are two special cases, which have CDFs which are easy to compute. Which can be derived by careful consideration of probabilities.
[1]&amp;ldquo;url&amp;rdquo;,&amp;ldquo;https://en.wikipedia.org/wiki/Order_statistic&amp;quot;
]]></content:encoded>
    </item>
    <item>
      <title>11_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/11r/</link>
      <pubDate>Fri, 05 Nov 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_8/11r/</guid>
      <description>11_R assignament Request Do a research about the general correlation coefficient for ranks and the most common indices that can be derived by it. Do one example of computation of these correlation coefficients for ranks.
General correlation coefficient for ranks In statistics, a rank correlation is any of several statistics that measure an ordinal association—the relationship between rankings of different ordinal variables or different rankings of the same variable, where a “ranking” is the assignment of the ordering labels “first”, “second”, “third”, etc.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[11_R assignament Request Do a research about the general correlation coefficient for ranks and the most common indices that can be derived by it. Do one example of computation of these correlation coefficients for ranks.
General correlation coefficient for ranks In statistics, a rank correlation is any of several statistics that measure an ordinal association—the relationship between rankings of different ordinal variables or different rankings of the same variable, where a “ranking” is the assignment of the ordering labels “first”, “second”, “third”, etc. to different observations of a particular variable.
A rank correlation coefficient measures the degree of similarity between two rankings, and can be used to assess the significance of the relation between them.
Some of the more popular rank correlation statistics include
 Spearman’s ρ Kendall’s τ Goodman and Kruskal’s γ Somers’ D  An increasing rank correlation coefficient implies increasing agreement between rankings. The coefficient is inside the interval [−1, 1] and assumes the value:
 1 if the agreement between the two rankings is perfect; the two rankings are the same. 0 if the rankings are completely independent. −1 if the disagreement between the two rankings is perfect; one ranking is the reverse of the other.  Following Diaconis (1988), a ranking can be seen as a permutation of a set of objects. Thus we can look at observed rankings as data obtained when the sample space is (identified with) a symmetric group. We can then introduce a metric, making the symmetric group into a metric space. Different metrics will correspond to different rank correlations.
To illustrate the computation, suppose a coach trains long-distance runners for one month using two methods. Group A has 5 runners, and Group B has 4 runners. The stated hypothesis is that method A produces faster runners. The race to assess the results finds that the runners from Group A do indeed run faster, with the following ranks: 1, 2, 3, 4, and 6. The slower runners from Group B thus have ranks of 5, 7, 8, and 9.
The analysis is conducted on pairs, defined as a member of one group compared to a member of the other group. For example, the fastest runner in the study is a member of four pairs: (1,5), (1,7), (1,8), and (1,9). All four of these pairs support the hypothesis, because in each pair the runner from Group A is faster than the runner from Group B. There are a total of 20 pairs, and 19 pairs support the hypothesis. The only pair that does not support the hypothesis are the two runners with ranks 5 and 6, because in this pair, the runner from Group B had the faster time. By the Kerby simple difference formula, 95% of the data support the hypothesis (19 of 20 pairs), and 5% do not support (1 of 20 pairs), so the rank correlation is r = .95 – .05 = .90.
The maximum value for the correlation is r = 1, which means that 100% of the pairs favor the hypothesis. A correlation of r = 0 indicates that half the pairs favor the hypothesis and half do not; in other words, the sample groups do not differ in ranks, so there is no evidence that they come from two different populations. An effect size of r = 0 can be said to describe no relationship between group membership and the members’ ranks.
[1]&amp;ldquo;url&amp;rdquo;,&amp;ldquo;https://en.wikipedia.org/wiki/Rank_correlation&amp;quot;
]]></content:encoded>
    </item>
    <item>
      <title>8_RA</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/8ra/</link>
      <pubDate>Fri, 05 Nov 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_8/8ra/</guid>
      <description>8_RA assignament Request Find out on the web what you have just generated in the previous application. Can you find out about all the well known distributions that &amp;ldquo;naturally arise&amp;rdquo; in this process ?
The Poisson distribution When in the 11A we calculate the single and double jump we find out ones of the most important distribution of statistic the Possion distribution, in fact the poisson distribution express the probability that a certain number of independent event happen.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[8_RA assignament Request Find out on the web what you have just generated in the previous application. Can you find out about all the well known distributions that &amp;ldquo;naturally arise&amp;rdquo; in this process ?
The Poisson distribution When in the 11A we calculate the single and double jump we find out ones of the most important distribution of statistic the Possion distribution, in fact the poisson distribution express the probability that a certain number of independent event happen.
The Poisson process A Poisson process is a simple and widely used stochastic process for modeling the times at which arrivals enter a system. For the Poisson process, arrivals may occur at arbitrary positive times, and the probability of an arrival at any particular instant is 0. This means that there is no very clean way of describing a Poisson process in terms of the probability of an arrival at any given instant. It is more convenient infact to define a Poisson process in terms of the sequence of interarrival times[2]
Arrival process Is a sequence of sums of interarrival times 0&amp;lt;S1&amp;lt;S2 each ones callaed arrival epochs and represent the times at wich some repeting event occurs.
Definition of the Poisson process The resulting random process is called a Poisson process with rate (or intensity) λ. Here is a formal definition of the Poisson process.
Let λ&amp;gt;0 be fixed. The counting process {N(t),t∈[0,∞)} is called a Poisson process with rates λ if all the following conditions hold:
 N(0)=0; N(t) has independent increments; the number of arrivals in any interval of length τ&amp;gt;0 has Poisson(λτ) distribution.  Poisson Distributions A discrete random variable X is said to have a Poisson distribution, with parameter λ&amp;gt;0 if it has a probability mass function given by:
here:
 k is the number of occurrences (k=0,1,2&amp;hellip;) e is Euler&amp;rsquo;s number ( e=2.71828&amp;hellip;) ! is the factorial function.  [1]&amp;ldquo;url&amp;rdquo;,&amp;ldquo;https://www.probabilitycourse.com/chapter11/11_1_2_basic_concepts_of_the_poisson_process.phpk&amp;quot; [2]&amp;ldquo;url&amp;quot;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-262-discrete-stochastic-processes-spring-2011/course-notes/MIT6_262S11_chap02.pdf&amp;rdquo; [3]&amp;ldquo;url&amp;rdquo;,&amp;ldquo;https://towardsdatascience.com/the-poisson-distribution-and-poisson-process-explained-4e2cb17d459&amp;quot; [4]&amp;ldquo;url&amp;rdquo;,&amp;ldquo;https://en.wikipedia.org/wiki/Poisson_distributiohttps://en.wikipedia.org/wiki/Poisson_distributionn&amp;quot;
]]></content:encoded>
    </item>
    <item>
      <title>10_A</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/10a/</link>
      <pubDate>Thu, 28 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_8/10a/</guid>
      <description>10_A assignament Request Given a random variable, extract m samples of size n and plot the empirical distribution of its mean (histogram), the first and the last order statistics. Comment on what you see.
My Solution   Code in C#
Class for graphicate the histogram&amp;rsquo;s private void disegnaIstogrammi(Rectangle viewPort, Tuple&amp;lt;Dictionary&amp;lt;double, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;&amp;gt; tuple) { int i = 0; SolidBrush semiTransBrush = new SolidBrush(Color.FromArgb(128, 0, 0, 0)); foreach (var v in tuple.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[10_A assignament Request Given a random variable, extract m samples of size n and plot the empirical distribution of its mean (histogram), the first and the last order statistics. Comment on what you see.
My Solution   Code in C#
Class for graphicate the histogram&amp;rsquo;s private void disegnaIstogrammi(Rectangle viewPort, Tuple&amp;lt;Dictionary&amp;lt;double, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;&amp;gt; tuple) { int i = 0; SolidBrush semiTransBrush = new SolidBrush(Color.FromArgb(128, 0, 0, 0)); foreach (var v in tuple.Item1) { int x, y; int width, height; // in this case on the fly trasformation is way faster  x = (int)(this.viewPort.Left &#43; 20 * i); y = (int)(viewPort.Top &#43; viewPort.Height / 4 - v.Value / 10); width = 15; height = v.Value / 10; Rectangle rectangle = new Rectangle(x, y, width, height); g2.DrawRectangle(Pens.Black, rectangle); g2.FillRectangle(semiTransBrush, rectangle); g2.FillRectangle(Brushes.Cyan, rectangle); g2.DrawString(((decimal)v.Key).ToString(), new Font(&amp;#34;Calibri&amp;#34;, 10.0f, FontStyle.Regular, GraphicsUnit.Pixel), semiTransBrush, new Point(x, y&#43;v.Value/10&#43;1)); i&#43;&#43;; } g2.DrawString(&amp;#34;Distribuzione originale &amp;#34;, new Font(&amp;#34;Calibri&amp;#34;, 13.0f, FontStyle.Italic, GraphicsUnit.Pixel), semiTransBrush, new Point(this.viewPort.Left - 140, (viewPort.Top &#43; viewPort.Height/4))); i = 0; foreach (var v in tuple.Item2) { int x, y; int width, height; // in this case on the fly trasformation is way faster  x = (int)(this.viewPort.Left &#43; 20 * i); y = (int)(viewPort.Top &#43; viewPort.Height /2 - v.Value / 2); width = 15; height = v.Value / 2; Rectangle rectangle = new Rectangle(x, y, width, height); g2.DrawRectangle(Pens.Black, rectangle); g2.FillRectangle(semiTransBrush, rectangle); g2.FillRectangle(Brushes.Cyan, rectangle); g2.DrawString(v.Key.ToString(), new Font(&amp;#34;Calibri&amp;#34;, 10.0f, FontStyle.Regular, GraphicsUnit.Pixel), semiTransBrush, new Point(x, y&#43;v.Value/2)); i&#43;&#43;; } g2.DrawString(&amp;#34;Min &amp;#34;, new Font(&amp;#34;Calibri&amp;#34;, 13.0f, FontStyle.Italic, GraphicsUnit.Pixel), semiTransBrush, new Point(this.viewPort.Left - 50, (viewPort.Top &#43; viewPort.Height/2))); i = 0; foreach (var v in tuple.Item3) { int x, y; int width, height; // in this case on the fly trasformation is way faster  x = (int)(this.viewPort.Left &#43; 20 * i); y = (int)(viewPort.Top &#43; viewPort.Height -30 - v.Value /2); width = 15; height = v.Value / 2; Rectangle rectangle = new Rectangle(x, y, width, height); g2.DrawRectangle(Pens.Black, rectangle); g2.FillRectangle(semiTransBrush, rectangle); g2.FillRectangle(Brushes.Cyan, rectangle); g2.DrawString(v.Key.ToString(), new Font(&amp;#34;Calibri&amp;#34;, 10.0f, FontStyle.Regular, GraphicsUnit.Pixel), semiTransBrush, new Point(x, y&#43;v.Value/2)); i&#43;&#43;; } g2.DrawString(&amp;#34;Max &amp;#34;, new Font(&amp;#34;Calibri&amp;#34;, 13.0f, FontStyle.Italic, GraphicsUnit.Pixel), semiTransBrush, new Point(this.viewPort.Left - 50, (viewPort.Top &#43; viewPort.Height-30 ))); }  Class for the generation and distribution calculus public Tuple&amp;lt;Dictionary&amp;lt;double, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;&amp;gt; valueToDictionarys(int m, int n) { Dictionary&amp;lt;double, List&amp;lt;double&amp;gt;&amp;gt; randomvalues = new Dictionary&amp;lt;double, List&amp;lt;double&amp;gt;&amp;gt;(); int i = 0; int j = 0; decimal min; decimal max; //generation of random ditribution  for (i = 0; i &amp;lt; m; i&#43;&#43;) { List&amp;lt;Double&amp;gt; tmp = new List&amp;lt;double&amp;gt;(); for (j = 0; j &amp;lt; n; j&#43;&#43;) tmp.Add(R.NextDouble()); randomvalues.Add(i, tmp); } Dictionary&amp;lt;double, int&amp;gt; randomdistrib = new Dictionary&amp;lt;double, int&amp;gt;(); Dictionary&amp;lt;decimal, int&amp;gt; minValues = new Dictionary&amp;lt;decimal,int&amp;gt;(); Dictionary&amp;lt;decimal, int&amp;gt; maxValues = new Dictionary&amp;lt;decimal, int&amp;gt;(); for (double k = 0.0; k &amp;lt;= 1.0000; k = k &#43; 0.100) { foreach (var list in randomvalues) { foreach (var elem in list.Value) { if (elem &amp;gt;= k &amp;amp;&amp;amp; elem &amp;lt;= (k &#43; 0.1)) { int tmp = 1; if (randomdistrib.TryGetValue(k, out tmp)) { randomdistrib.Remove(k); tmp&#43;&#43;; } randomdistrib.Add(k, tmp); } } } } foreach (var list in randomvalues) { min = 1; max = 0; foreach (var elem in list.Value) { if ((decimal)elem &amp;lt; min) min =((decimal)( elem-(elem%0.01))); if ((decimal)elem &amp;gt; max) max = ((decimal)(elem - (elem % 0.01))); } int tmp2 = 1; if (minValues.TryGetValue(min, out tmp2)) { minValues.Remove(min); tmp2&#43;&#43;; } minValues.Add(min, tmp2); tmp2 = 1; if (maxValues.TryGetValue(max, out tmp2)) { maxValues.Remove(max); tmp2&#43;&#43;; } maxValues.Add(max, tmp2); } return new Tuple&amp;lt;Dictionary&amp;lt;double, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;, Dictionary&amp;lt;decimal, int&amp;gt;&amp;gt;(randomdistrib, minValues, maxValues); } public void disegnaPaths(List&amp;lt;Strade&amp;gt; viewPortPaths) { for (int i = 0; i &amp;lt; viewPortPaths.Count; i&#43;&#43;) { Pen pen = new Pen(Color.FromArgb(R.Next(0, 255), R.Next(0, 255), R.Next(0, 255))); for (int j = 0; j &amp;lt; viewPortPaths[i].getPath().Count - 1; j&#43;&#43;) { g2.DrawLine(pen, (float)viewPortPaths[i].getPath()[j].X, (float)viewPortPaths[i].getPath()[j].Y, (float)viewPortPaths[i].getPath()[j &#43; 1].X, (float)viewPortPaths[i].getPath()[j &#43; 1].Y); } } }  ]]></content:encoded>
    </item>
    <item>
      <title>11_A</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_8/11a/</link>
      <pubDate>Thu, 28 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_8/11a/</guid>
      <description>11_A assignament Request Discover a new important stochastic process by yourself! Consider the general scheme we have used so far to simulate some stochastic processes (such as the relative frequency of success in a sequence of trials, the sample mean and the random walk) and now add this new process to our simulator. Same scheme as previous program (random walk), except changing the way to compute the values of the paths at each time.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[11_A assignament Request Discover a new important stochastic process by yourself! Consider the general scheme we have used so far to simulate some stochastic processes (such as the relative frequency of success in a sequence of trials, the sample mean and the random walk) and now add this new process to our simulator. Same scheme as previous program (random walk), except changing the way to compute the values of the paths at each time. Starting from value 0 at time 0, for each of m paths, at each new time compute N(i) = N(i-1) &#43; Random step(i), for i = 1, &amp;hellip;, n, where Random step(i) is now a Bernoulli random variable with success probability equal to λ * (1/n) (where λ is a user parameter, eg. 50, 100, &amp;hellip;). At time n (last time) and one (or more) other chosen inner time 1&amp;lt;j&amp;lt;n (j is a program parameter) create and represent with histogram the distribution of N(i). Represent also the distributions of the following quantities (and any other quantity that you think of interest):
 Distance (time elapsed) of individual jumps from the origin Distance (time elapsed) between consecutive jumps (&amp;ldquo;holding times&amp;rdquo;)  My Solution   [Code in C#]https://github.com/yuky2020/Statistics-Pratical-LABS/tree/main/Assignment10/C%23/BernulliGraphics)
The part in disegna Grafici in witch i call the various usefull function { distrubution = new BernulliPathfinder(n, m, lambda); disegnaPaths(fromPathstoViewport(distrubution.Get_paths(), viewPort)); disegnaHistogramma(viewPort, getDistribution(distrubution.Get_paths(), m / SCALE, j), n, j); disegnaHistogramma(viewPort, getDistribution(distrubution.Get_paths(), m / SCALE, n), n, n); //disegno le distanze  disegnaDistanze(viewPort, individualJumpFromOriginD(distrubution.Get_paths()), 0, &amp;#34;Single jump distace &amp;#34;); disegnaDistanze(viewPort, doublejumpD(distrubution.Get_paths()), 80, &amp;#34;Double jump distance&amp;#34;); }  the class for writing the histogram and for get the distribution are the same as the precedent hw so i will skip it,but bernulli pathfinder now work with lamba insted of p
Bernoulli pathfinder class public class BernulliPathfinder: Pathfinder { int m; //number of paths  int n; //number of points  double p; //probability  public List&amp;lt;Strade&amp;gt; paths = new List&amp;lt;Strade&amp;gt;(); private Random R; public BernulliPathfinder(int n, int m, double p) { this.m = m; this.n = n; this.p = p; this.R = new Random(); for (int i=0; i &amp;lt; m; i&#43;&#43;) { paths.Add(new Strade(createBernulliList())); } } private int bernoulli_Result(double p,int n) { double random_outcome = R.NextDouble(); if (random_outcome &amp;lt;= p/n) return 1; else return 0; } private List&amp;lt;double&amp;gt; createBernulliList() { List&amp;lt;double&amp;gt; bernoulli = new List&amp;lt;double&amp;gt;(); for (int i = 0; i &amp;lt; n; i&#43;&#43;) { bernoulli.Add(bernoulli_Result(p, n)); } return bernoulli; } public List&amp;lt;Strade&amp;gt; Get_paths() { return this.paths; } }  Disegna Distanze method private void disegnaDistanze(Rectangle viewPort, Dictionary&amp;lt;int, int&amp;gt; intervals, int offset, String text) { int i = 0; SolidBrush semiTransBrush = new SolidBrush(Color.FromArgb(128, 0, 0, 0)); foreach (var v in intervals) { int x, y; int width, height; // in this case on the fly trasformation is way faster  x = (int)(this.viewPort.Left &#43; 20 * i); y = (int)(viewPort.Top &#43; viewPort.Height &#43; offset); width = v.Value; height = viewPort.Height / intervals.Count; Rectangle rectangle = new Rectangle(x, y, width, height); g2.DrawRectangle(Pens.Black, rectangle); g2.FillRectangle(semiTransBrush, rectangle); g2.FillRectangle(Brushes.Violet, rectangle); g2.DrawString(v.Key.ToString(), new Font(&amp;#34;Calibri&amp;#34;, 10.0f, FontStyle.Regular, GraphicsUnit.Pixel), semiTransBrush, new Point(x, y)); i&#43;&#43;; } g2.DrawString(text, new Font(&amp;#34;Calibri&amp;#34;, 13.0f, FontStyle.Italic, GraphicsUnit.Pixel), semiTransBrush, new Point(this.viewPort.Left - 140, (viewPort.Top &#43; viewPort.Height &#43; offset))); }  Individual jump private Dictionary&amp;lt;int, int&amp;gt; individualJumpFromOriginD(List&amp;lt;Strade&amp;gt; strades) { Dictionary&amp;lt;int, int&amp;gt; dbj = new Dictionary&amp;lt;int, int&amp;gt;(); int i = 0; int tmp = 1; Boolean trov = false; foreach (Strade s in strades) { i = 0; tmp = 1; trov = false; while (!trov &amp;amp;&amp;amp; (i &amp;lt; s.getPath().Count() - 2)) { if (s.getPath()[i].Y != s.getPath()[i &#43; 1].Y) trov = true; i&#43;&#43;; } i&#43;&#43;; if (dbj.TryGetValue(i, out tmp)) { dbj.Remove(i); dbj.Add(i, tmp &#43; 1); } else dbj.Add(i, tmp); } return dbj; }  Double jump private Dictionary&amp;lt;int, int&amp;gt; doublejumpD(List&amp;lt;Strade&amp;gt; strades) { Dictionary&amp;lt;int, int&amp;gt; dbj = new Dictionary&amp;lt;int, int&amp;gt;(); int i = 0; int tmp = 1; Boolean trov = false; foreach (Strade s in strades) { i = 0; tmp = 1; trov = false; while (!trov &amp;amp;&amp;amp; (i &amp;lt; s.getPath().Count() - 2)) { if (s.getPath()[i].Y != s.getPath()[i &#43; 1].Y &amp;amp;&amp;amp; s.getPath()[i &#43; 1].Y != s.getPath()[i &#43; 2].Y) trov = true; i&#43;&#43;; } i = i &#43; 1; if (dbj.TryGetValue(i, out tmp)) { dbj.Remove(i); dbj.Add(i, tmp &#43; 1); } else dbj.Add(i, tmp); } return dbj; }  ]]></content:encoded>
    </item>
  </channel>
</rss>
