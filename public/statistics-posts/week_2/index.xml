<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <docs>https://blogs.law.harvard.edu/tech/rss</docs>
    <title>Week two HW on Matteo Bianchi personal site and blog</title>
    <link>https://www.matteobianchi.eu/statistics-posts/week_2/</link>
    <description>Recent content in Week two HW on Matteo Bianchi personal site and blog</description>
    <image>
      <title>Week two HW on Matteo Bianchi personal site and blog</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/</link>
      <url>https://source.unsplash.com/collection/983219/2000x1322</url>
    </image>
    <ttl>1440</ttl>
    <generator>After Dark 9.2.3 (Hugo 0.80.0)</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 18 Nov 2021 23:46:40 UT</lastBuildDate>
    <atom:link href="https://www.matteobianchi.eu/statistics-posts/week_2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1_RA</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/1ra/</link>
      <pubDate>Tue, 05 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_2/1ra/</guid>
      <description>1_RA assignament Request Understand how the floating point representation works and describe systematically (possibly using categories) all the possible problems that can happen. Try to classify the various issues and limitations (representation, comparison, rounding, propagation, approximation, loss of significance, cancellation, etc.) and provide simple examples for each of the categories you have identified
Floating point notation It&amp;rsquo;s a fantastic thing, we could express a vast range of value in a very efficent way: 32 bit notation: The frist bit is for sign, then 8 bit of exponent (frist bit is sign of the exponent ) so from 2^-127 to 2^127 and then 23 bit of mantissa.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[1_RA assignament Request Understand how the floating point representation works and describe systematically (possibly using categories) all the possible problems that can happen. Try to classify the various issues and limitations (representation, comparison, rounding, propagation, approximation, loss of significance, cancellation, etc.) and provide simple examples for each of the categories you have identified
Floating point notation It&amp;rsquo;s a fantastic thing, we could express a vast range of value in a very efficent way: 32 bit notation: The frist bit is for sign, then 8 bit of exponent (frist bit is sign of the exponent ) so from 2^-127 to 2^127 and then 23 bit of mantissa.
Limitation A floating-point format has limited range and precision. These limitations can be understood by considering using scientific notation with a limited range of exponents and a limited number of digits in the mantissa.
  Range limitation: A fixed number of &amp;ldquo;Exp&amp;rdquo; bits is comparable to limiting the size of the exponent in scientific notation.
  Precision limitation: A fixed number of &amp;ldquo;Fraction&amp;rdquo; bits is comparable to limiting the number of digits in the mantissa in scientific notation. [1]
  Errors: Approximation this notation anyway present some problem,for example on how to rappreset 0.1, 0.2 ,0.3 without getting an error on the 17th decimal place that even if low is an approximation,and even if solution such as use decimal notation exist we should know this behaveiour.[2]
Errors: Rounding Because floating-point numbers have a limited number of digits, they cannot represent all real numbers accurately: when there are more digits than the format allows, the leftover ones are omitted - the number is rounded. There are three reasons why this can be necessary: [2]
  Too many significant digits
 The great advantage of floating point is that leading and trailing zeroes (within the range provided by the exponent) don’t need to be stored. But if, without those, there are still more digits than the significand can store, rounding becomes necessary. In other words, if your number simply requires more precision than the format can provide, you’ll have to sacrifice some of it, which is no big surprise. For example, with a floating point format that has 3 digits in the significand, 1000 does not require rounding, and neither does 10000 or 1110 - but 1001 will have to be rounded. With the large number of significand digits available in typical floating-point formats, this may seem to be a rarely encountered problem, but if you perform a sequence of calculations, especially multiplication and division, you can very quickly reach this point.    Periodical digits
 Any (irreducible) fraction where the denominator has a prime factor that does not occur in the base requires an infinite number of digits that repeat periodically after a certain point, and this can already happen for very simple fractions. For example, in decimal 1/4, 3/5 and 8/20 are finite, because 2 and 5 are the prime factors of 10. But 1/3 is not finite, nor is 2/3 or 1/7 or 5/6, because 3 and 7 are not factors of 10. Fractions with a prime factor of 5 in the denominator can be finite in base 10, but not in base 2 - the biggest source of confusion for most novice users of floating-point numbers.    Non-rational numbers
 Non-rational numbers cannot be represented as a regular fraction at all, and in positional notation (no matter what base) they require an infinite number of non-recurring digits.    Comparison Due to rounding errors, most floating-point numbers end up being slightly imprecise. As long as this imprecision stays small, it can usually be ignored. However, it also means that numbers expected to be equal (e.g. when calculating the same result through different correct methods) often differ slightly, and a simple equality test fails. For example:[2]
float a = 0.15 &#43; 0.15 float b = 0.1 &#43; 0.2 if(a == b) // can be false! if(a &amp;gt;= b) // can also be false!  Propagation While the errors in single floating-point numbers are usualy very small, even simple calculations on them can contain pitfalls that increase the error in the result way beyond just having the individual errors “add up”.[2] this usualy come-up with addition or subtraction
 of number of differet magnitude es: if you add 1 to 100000000000 the value will not change even if you do this 10000000000000 times When numbers are very close to each other and are subtracted: the result’s less significant digits consist mostly of rounding errors  the more calculatuion are done the more the error propagate
BONUS: THE GENIUS MOVE IN QUAKE III   [1]Title:&amp;ldquo;Floating-Point-Limtation&amp;rdquo; url:&amp;ldquo;https://www.d.umn.edu/~gshute/asm/floating-point.xhtml&amp;quot;
[2]Title:&amp;ldquo;0.00112&amp;rdquo; url:&amp;ldquo;https://floating-point-gui.de/basic/&amp;quot;
]]></content:encoded>
    </item>
    <item>
      <title>2_A</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/2a/</link>
      <pubDate>Tue, 05 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_2/2a/</guid>
      <description>2_A assignament Request Create - in both languages C# and VB.NET - a demonstrative program which computes the online arithmetic mean (if it&amp;rsquo;s a numeric variable) and your own algo to compute the distribution for a discrete variable and for a continuous variable (can use values simulated with RANDOM object).
My Solution   Code in C#
Code in VB.net
Code in zip(mirror)
Class Elemento Distribuzione in C# class ElementoDisribuzione { private String name; private Dictionary&amp;lt;String,Double&amp;gt; variabili; public ElementoDisribuzione(String nome) { this.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[2_A assignament Request Create - in both languages C# and VB.NET - a demonstrative program which computes the online arithmetic mean (if it&amp;rsquo;s a numeric variable) and your own algo to compute the distribution for a discrete variable and for a continuous variable (can use values simulated with RANDOM object).
My Solution   Code in C#
Code in VB.net
Code in zip(mirror)
Class Elemento Distribuzione in C# class ElementoDisribuzione { private String name; private Dictionary&amp;lt;String,Double&amp;gt; variabili; public ElementoDisribuzione(String nome) { this.name = nome; this.variabili = new Dictionary&amp;lt;string, double&amp;gt;(); } public void setVariable(String name,double value) { this.variabili.Add(name, value); } public bool getVariable(String name,out double ret) { if (this.variabili.TryGetValue(name, out ret)) return true; else return false; } public Dictionary&amp;lt;String, Double&amp;gt; getVariabili() { return this.variabili; } }  Class MediaCalOnline in C# class MediaCalOnline { Dictionary&amp;lt;String, double&amp;gt; medieAritmetica; Dictionary&amp;lt;String, int&amp;gt; numeroElementi; public MediaCalOnline() { medieAritmetica = new Dictionary&amp;lt;string, double&amp;gt;(); numeroElementi = new Dictionary&amp;lt;String, int&amp;gt;(); } public void addAttribute(String nome, double value) { double tmp; int i; if (medieAritmetica.ContainsKey(nome)) { medieAritmetica.TryGetValue(nome, out tmp); numeroElementi.TryGetValue(nome, out i); i&#43;&#43;; tmp = tmp &#43; (value - tmp) / i; numeroElementi.Remove(nome); medieAritmetica.Remove(nome); medieAritmetica.Add(nome, tmp); numeroElementi.Add(nome, i); } else { medieAritmetica.Add(nome, value); numeroElementi.Add(nome, 1); } } public bool getMedia(String name,out double i) { if (medieAritmetica.TryGetValue(name, out i)) return true; else return false; } public void addElemento(ElementoDisribuzione e) { foreach (var item in e.getVariabili()) addAttribute(item.Key, item.Value); } }  Class Distribuzione in C# class Distribuzione { private Dictionary&amp;lt;String, SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt;&amp;gt; distr; double intervall = 10; public Distribuzione() { distr = new Dictionary&amp;lt;String, SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt;&amp;gt;(); } //intervall standard 10  public void addAttributDef(String s, double i) { addAttribute(s, i, intervall); } public void addAttribute(String s, double value, double inte) { SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt; actualdistr; double min, max; int i = 1; min = value - (value % inte); max = value &#43; (inte - (value % inte)); Tuple&amp;lt;double, double&amp;gt; tmp = new Tuple&amp;lt;double, double&amp;gt;(min, max); if (!distr.TryGetValue(s, out actualdistr)) { actualdistr = new SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt;(); actualdistr.Add(tmp, 1); distr.Add(s, actualdistr); } else { if (!actualdistr.TryGetValue(tmp, out i)) actualdistr.Add(tmp, 1); else { i&#43;&#43;; actualdistr.Remove(tmp); actualdistr.Add(tmp, i); } distr.Remove(s); distr.Add(s, actualdistr); } } public void addElemento(ElementoDisribuzione e, double inter) { foreach (var item in e.getVariabili()) { this.addAttribute(item.Key, item.Value, inter); } } public void addElementoDef(ElementoDisribuzione e) { addElemento(e, intervall); } public bool getdistribuzione(string s, out SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt; req) { if (distr.TryGetValue(s, out req)) return true; else return false; } }  Main Form in C# public partial class Form1 : Form { public Form1() { InitializeComponent(); } Random r = new Random(); MediaCalOnline mc=new MediaCalOnline(); Distribuzione dc = new Distribuzione(); private void Form1_Load(object sender, EventArgs e) { } private void button1_Click(object sender, EventArgs e) { timer1.Interval = 2; timer1.Start(); button3.Visible = true; button2.Visible = true; button1.Visible = false; } private void button2_Click(object sender, EventArgs e) { timer2.Interval = 10; timer2.Start(); button2.Visible = false; } private void timer1_Tick(object sender, EventArgs e) { double height; ElementoDisribuzione studente = new ElementoDisribuzione(&amp;#34;Student&amp;#34;); height =r.NextDouble()&#43;r.Next(140,200); studente.setVariable(&amp;#34;height&amp;#34;, height); mc.addElemento(studente); dc.addElementoDef(studente); richTextBox1.Text &#43;= &amp;#34;nuovo Studente altezza: &amp;#34; &#43; height &#43; Environment.NewLine; } private void timer2_Tick(object sender, EventArgs e) { double i; SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt; distTest =new SortedDictionary&amp;lt;Tuple&amp;lt;double, double&amp;gt;, int&amp;gt;(); mc.getMedia(&amp;#34;height&amp;#34;, out i); if (dc.getdistribuzione(&amp;#34;height&amp;#34;, out distTest)) { richTextBox3.Text = &amp;#34;&amp;#34;; foreach (var item in distTest) { richTextBox3.Text &#43;= item.Key.Item1 &#43; &amp;#34;-&amp;#34; &#43; item.Key.Item2 &#43; &amp;#34; presenta &amp;#34; &#43; item.Value &#43; &amp;#34; entita &amp;#34;&#43;Environment.NewLine; } } richTextBox2.Text = &amp;#34;the A M of the height is&amp;#34; &#43; i &#43; Environment.NewLine; } private void button3_Click(object sender, EventArgs e) { timer1.Stop(); timer2.Stop(); button1.Visible = true; button2.Visible = true; } }  ]]></content:encoded>
    </item>
    <item>
      <title>2_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/2r/</link>
      <pubDate>Tue, 05 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_2/2r/</guid>
      <description>2_R assignament Request Describe the most common configuration of data repositories in the real world and corporate environment. Concepts such as Operational or Transactional systems (OLTP), Data Warehouse DW, Data Marts, Analytical and statistical systems (OLAP), etc. Try to draw a conceptual picture of how all these components may work together and how the flow of data and information is processed to extract useful knowledge from raw data.
Online transaction processing OLTP or Online Transaction Processing is a type of data processing that consists of executing a number of transactions occurring concurrently—online banking, shopping, order entry, or sending text messages, for example.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[2_R assignament Request Describe the most common configuration of data repositories in the real world and corporate environment. Concepts such as Operational or Transactional systems (OLTP), Data Warehouse DW, Data Marts, Analytical and statistical systems (OLAP), etc. Try to draw a conceptual picture of how all these components may work together and how the flow of data and information is processed to extract useful knowledge from raw data.
Online transaction processing OLTP or Online Transaction Processing is a type of data processing that consists of executing a number of transactions occurring concurrently—online banking, shopping, order entry, or sending text messages, for example. These transactions traditionally are referred to as economic or financial transactions, recorded and secured so that an enterprise can access the information anytime for accounting or reporting purposes. [1]
Online analytical processing OLTP enables the real-time execution of large numbers of transactions by large numbers of people, whereas online analytical processing (OLAP) usually involves querying these transactions (also referred to as records) in a database for analytical purposes. OLAP helps companies extract insights from their transaction data so they can use it for making more informed decisions.[1]
Data Warehouse A data warehouse is a central repository of information that can be analyzed to make more informed decisions. Data flows into a data warehouse from transactional systems, relational databases, and other sources, typically on a regular cadence.[2]
Data mart A data mart is a structure / access pattern specific to data warehouse environments, used to retrieve client-facing data. The data mart is a subset of the data warehouse and is usually oriented to a specific business line or team. Whereas data warehouses have an enterprise-wide depth, the information in data marts pertains to a single department.[3]
Conceptual Picture Data flows from different Data sources(OLTP, OLAP, files, etc ) in a staging area, then re-analyzed and organized in a DW (usual data are anonymized and aggregated to get used for statistical purposes (As described in the GDPR)), then data are aggregated in a meaningful way in various datasets and at this point is available for analysis
[1]&amp;ldquo;ORACLE&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.oracle.com/database/what-is-oltp/&amp;quot;
[2]&amp;ldquo;Amazon AWS&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://aws.amazon.com/it/data-warehouse/&amp;quot;
[3]&amp;ldquo;Data mart&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://en.wikipedia.org/wiki/Data_mart&amp;quot;
]]></content:encoded>
    </item>
    <item>
      <title>3_A</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/3a/</link>
      <pubDate>Tue, 05 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_2/3a/</guid>
      <description>3_A assignament Request Create an object providing a rectangular area which can be moved and resized using the mouse. This area will hold our future charts and graphics.
My Solution   Code in C#
Main Form: public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { } private void panel1_Paint(object sender, PaintEventArgs e) { } bool allowResize = false; bool allowMove = false; private void resizaileBox_MouseUp(object sender, MouseEventArgs e) { allowResize = false; allowMove = false; } private void resizaileBox_MouseMove(object sender, MouseEventArgs e) { if (allowResize) { this.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[3_A assignament Request Create an object providing a rectangular area which can be moved and resized using the mouse. This area will hold our future charts and graphics.
My Solution   Code in C#
Main Form: public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { } private void panel1_Paint(object sender, PaintEventArgs e) { } bool allowResize = false; bool allowMove = false; private void resizaileBox_MouseUp(object sender, MouseEventArgs e) { allowResize = false; allowMove = false; } private void resizaileBox_MouseMove(object sender, MouseEventArgs e) { if (allowResize) { this.panel1.Height = resizaileBox.Top &#43; e.Y; this.panel1.Width = resizaileBox.Left &#43; e.X; } if (allowMove) { this.panel1.Location = new Point(this.panel1.Location.X &#43; e.X, this.panel1.Location.Y &#43; e.Y); } } private void resizaileBox_Click(object sender, EventArgs e) { } private void resizaileBox_MouseDown(object sender, MouseEventArgs e) { if (e.Button == MouseButtons.Right) allowResize = true; else allowMove = true; } }  ]]></content:encoded>
    </item>
    <item>
      <title>3_R</title>
      <link>https://www.matteobianchi.eu/statistics-posts/week_2/3r/</link>
      <pubDate>Tue, 05 Oct 2021 18:03:36 UT</pubDate>
      <dc:creator>Matteo Bianchi</dc:creator>
      <guid>https://www.matteobianchi.eu/statistics-posts/week_2/3r/</guid>
      <description>3_R assignament Request Show how we can obtain an online algo for the arithmetic mean and explain the various possible reasons why it is preferable to the &amp;ldquo;naive&amp;rdquo; algo based on the definition.
Arithmetic mean standard: The aritmetic Mean or simply the average is the sum of a collection of numbers divided by the count of numbers in the collection [1].
The formuala that we usually use for the calculation is this: Limitation If we are computing the arithmetic mean of dataset variables(statistic attribute), moreover if we do this in an interactive way(online) or for any kind of computational circumstance that involves this calculus, the classical formula doesn&amp;rsquo;t work very well since we have to fully keep all the value and then do the operation, this could bring to some error such as (but not limited to) segmentation fault, invalid pointer or stack overflow.</description>
      <category domain="https://www.matteobianchi.eu/categories/statistic">Statistic</category>
      <content:encoded><![CDATA[3_R assignament Request Show how we can obtain an online algo for the arithmetic mean and explain the various possible reasons why it is preferable to the &amp;ldquo;naive&amp;rdquo; algo based on the definition.
Arithmetic mean standard: The aritmetic Mean or simply the average is the sum of a collection of numbers divided by the count of numbers in the collection [1].
The formuala that we usually use for the calculation is this: Limitation If we are computing the arithmetic mean of dataset variables(statistic attribute), moreover if we do this in an interactive way(online) or for any kind of computational circumstance that involves this calculus, the classical formula doesn&amp;rsquo;t work very well since we have to fully keep all the value and then do the operation, this could bring to some error such as (but not limited to) segmentation fault, invalid pointer or stack overflow.
Intercative way For remove the formula limitiation try to elaborate it in a different way: if we have only one element a1 the a.m &amp;ldquo;A&amp;rdquo; is = a1 this is our basic step. then let&amp;rsquo;s try to compute the algorithm for n value : So now we have an algo that is perfect for us, we can calculate the mean at each step and update it when other data is present; using this formula we resolve the issue of keep in memory a lot of values and perform arithmetic that could goes outside the bounds of the used variables
[1] Jacobs, Harold R. (1994). Mathematics: A Human Endeavor (Third ed.). W. H. Freeman.
]]></content:encoded>
    </item>
  </channel>
</rss>
